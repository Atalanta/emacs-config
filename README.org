#+TITLE: SNS Emacs Config
#+AUTHOR: Stephen Nelson-Smith

This is my literate Emacs configuration. Following the principles of literate programming, it is a single file containing both plain language commentary and discussion and executeable code.

This file is the only place that changes to my configuration are made - it's a single source of truth, which results in the creation of a clean, modular Emacs configuration.

* Instructions

Clone to =~/.emacs.d=:

#+BEGIN_EXAMPLE
cd $HOME
git clone git://github.com/Atalanta/emacs-config.git .emacs.d
#+END_EXAMPLE

Tangle the config:

#+begin_example
emacs --batch --load org --eval '(org-babel-tangle-file "README.org")'
#+end_example

When you first open Emacs, there will be a delay while the packages are downloaded and compiled.

If you wish to make changes, open this file in Emacs, update existing or create new code blocks if needed, and evaluate with =org-babel-tangle=. The code in the code blocks will be tangled to their respective locations, which will be available to an evaluated by Emacs on restart.

Note: code blocks will only be tangled if decorated with =:tangle= and the path to the file you wish to write.

* Overview

This file - =README.org= - is the document that generates my Emacs configuration. It is not loaded by Emacs itself, but by me, resulting in the rendered Emacs config on whatever machine the file is "tangled".

There are two top level files and two directories:

- =early-init.el=
- =init.el=
- =sns-emacs-modules=
- =sns-lisp=

* The ~early-init.el~ file

This is the first file that Emacs reads when starting up. It should have no dependencies on external packages, and is design to set up a few fundamental things before advancing to the main ~init.el~ file.

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (setq frame-inhibit-implied-resize t)
#+end_src

* The ~init.el~ file

This is the main Emacs config file. This is the place to put global settings which apply across Emacs, but which do not have any impact on startup time. It also imports the modules which make up the wider config.

** Support Nix
In some environments I use Nix, so we need to make the Nix profile available to Emacs:

#+begin_src emacs-lisp :tangle "init.el"
(defun setup-nix-path ()
  "Add Nix profile to Emacs environment."
  (let ((nix-bin (expand-file-name ".nix-profile/bin" (getenv "HOME"))))
    (add-to-list 'exec-path nix-bin)
    (setenv "PATH" (concat nix-bin ":" (getenv "PATH")))))

(setup-nix-path)
#+end_src

** Ensure shell environment variables are available

Some important environment variables like PATH are not inherited by Emacs when launched from the GUI on macOS. This package grabs those from the shell so Emacs can find tools like Git, Ruby, etc.


#+begin_src emacs-lisp :tangle "init.el"
(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize))
#+end_src

** Use zsh as the shell

Set zsh as the default shell for Emacs shell buffers and vterm.

#+begin_src emacs-lisp :tangle "init.el"
  (setq shell-file-name "/bin/zsh")
  (setq explicit-shell-file-name shell-file-name)
  (with-eval-after-load 'vterm
    (setq vterm-shell shell-file-name))
#+end_src

** Simplify auto-save and backup features
Emacs has some built-in features to protect users from over-writing files, losing data, and corruption. Some of these are somewhat moot when using Git, and in a single user environment, and can be disabled. Emacs does not automatically save your file as you go, it maintains a cached copy of your latest work, which it updates periodically. In the event that you quit Emacs without saving your work, when you start Emacs, it will offer to recover the most recent cached copy. This is fairly helpful, but by default it keeps these auto-save files in the same directory as your working copy, which is messy, so we configure it to keep the auto-save files in a separate place.

#+begin_src emacs-lisp :tangle "init.el"
(setq make-backup-files nil)

(setq auto-save-default t)
(setq auto-save-timeout 20)
(setq auto-save-interval 200)
(make-directory "~/.emacs.d/auto-save/" t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save/" t)))

(setq create-lockfiles nil)
#+end_src

** Allow short yes/no answers
By default, Emacs asks us to confirm some actions, like saving unsaved changes before quitting, by typing yes or no. This setting changes that behaviour so we only need to type y or n instead.

#+begin_src emacs-lisp :tangle "init.el"
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Don't persist "customisations"
Certain behaviours in Emacs result in Emacs noticing what it considers to be "customisations" which it will save in our ~init.el~ file. We will never explicitly customise Emacs outside of version control, so this is just noise. We can prevent this from happening by telling it to write those apparent customisations to a temporary file.

#+begin_src emacs-lisp :tangle "init.el"
(setq custom-file (make-temp-file "emacs-custom-"))
#+end_src

** Un-disable region-based up/downcase

Changing the case of a region is disabled by default, to avoid confusion. I don't want that behaviour.

#+begin_src emacs-lisp :tangle "init.el"
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
#+end_src


** Set up package archives
Emacs has two commonly used package archives - the GNU Elpa (Emacs Lisp Package Archive), which is 100% GPL software, and Melpa which is larger, and contains software released under non-GNU licence (including Org Roam and Magit).

#+begin_src emacs-lisp :tangle "init.el"
(setq package-archives
      '(("gnu-elpa" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")))
#+end_src

** Import modules
The rest of our configuration is modular. Each module lives in the ~sns-emacs-modules~ directory.

#+begin_src emacs-lisp :tangle "init.el"
  (mapc
   (lambda (string)
     (add-to-list 'load-path (locate-user-emacs-file string)))
   '("sns-emacs-modules" "sns-lisp"))
#+end_src

* The ~sns-emacs-modules/~

These are files which install and configure various aspects of the Emacs user experience.

#+begin_src emacs-lisp :tangle "init.el"
  (require 'sns-look-and-feel)
  (require 'sns-org-mode)
  (require 'sns-development-environment)
  (require 'sns-technical-writing)
#+end_src

** Look and Feel

*** Theme

Set a pleasant, modern, readable theme.

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-look-and-feel.el" :mkdirp yes
(use-package ef-themes
  :ensure t
  :config
  (load-theme 'ef-cherie t))
#+end_src

*** Fonts and font resizing
The default font size is a little small - set it to something a bit bigger. I like the Inconsolata font - this needs to be installed before this will work, so fall back if it isn't.

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-look-and-feel.el" :mkdirp yes
(if (member "Inconsolata" (font-family-list))
    (set-face-attribute 'default nil :font "Inconsolata-18")
  (set-face-attribute 'default nil :family "monospace" :height 180))
#+end_src
Increase, decrease and reset font size with command +/-/0.

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-look-and-feel.el"
  (global-set-key (kbd "s-=") (lambda () (interactive) (text-scale-increase 1)))
  (global-set-key (kbd "s--") (lambda () (interactive) (text-scale-decrease 1)))
  (global-set-key (kbd "s-0") (lambda () (interactive) (text-scale-set 0)))
#+end_src

*** General display and navigation
Show line numbers, and highlight where we are in the file, and make the cursor blink.

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-look-and-feel.el"
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'normal)
  (column-number-mode t)
  (global-hl-line-mode t)
  (blink-cursor-mode t)
#+end_src

*** Some buffers should not have line numbers

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-look-and-feel.el"
(dolist (mode '(help-mode
                helpful-mode
                messages-buffer-mode
                eshell-mode
                shell-mode
                term-mode
                vterm-mode
                cider-repl-mode
                completion-list-mode))
  (add-hook (intern (concat (symbol-name mode) "-hook"))
            (lambda () (display-line-numbers-mode 0))))
#+end_src

*** Run in fullscreen by default
When Emacs starts up, you can set the size of the "frame" (the window in which Emacs runs). I like to operate in full screen, and have the option to toggle that on and off.

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-look-and-feel.el"
  (set-frame-parameter nil 'fullscreen 'fullboth)
  (set-frame-parameter nil 'fullscreen nil)
  (global-set-key (kbd "C-c f") #'toggle-frame-fullscreen)
#+end_src

*** Minibuffer and navigation
Use a modern mini-buffer and navigation framework:

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-look-and-feel.el"
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    :bind (:map vertico-map
		("DEL" . vertico-directory-delete-char)
		("M-DEL" . vertico-directory-delete-word)))

  (use-package marginalia
    :ensure t
    :after vertico
    :init
    (marginalia-mode))

  (use-package orderless
    :ensure t
    :config
    (setq completion-styles '(orderless)))
#+end_src

*** Make available

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-look-and-feel.el"
(provide 'sns-look-and-feel)
#+end_src
** Org Mode
I use Org Mode as the cockpit of my life - I maintain my work and personal journals, any writing projects, and this literate config using Org Mode. I also use Org Mode for managing my ongoing commitments, both personally and professionally.

*** Templates

Org Tempo provides short cuts and templates for creating blocks. I use an Emacs Lisp template, since I frequently write Lisp in Org Mode, either for experimentation purposes, or as part of this config.

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-org-mode.el"
  (defun setup-structure-templates ()
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+end_src

*** GTD
I use Org Mode to implement the principles and practices of GTD.

**** Workflow
I don't like the default metaphore of "todos", preferring the idea of *outcomes* (which map onto GTD open loops or projects) and *actions*. I consider *follow up* to be a specific kind of action, rather than a context of "waiting for". I also log the time at which a task enters the completion state, for future records/analysis.

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-org-mode.el"
  (defun setup-gtd-flow ()
    (setq org-todo-keywords '((sequence "OUTCOME" "ACTION" "FU" "|" "DONE"))
	  org-log-done 'time))
#+end_src

**** Capture

I keep all my GTD projects and actions in a single file:

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-org-mode.el"
  (setq org-default-notes-file "~/journal/gtd.org")
#+end_src

I use two capture templates, one for *action* and one for *outcome*:

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-org-mode.el"
    (defvar sns-open-loop-content
      "* OUTCOME %?\n:PROPERTIES:\n:CREATED: %U\n:WHY:\n:VALUES:\n:SUCCESS:\n:END:\n")
    (defvar sns-next-action-content
      "** ACTION %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n")
    (defun template-content ()
      (setq open-loop-content sns-open-loop-content
	    next-action-content sns-next-action-content))
#+end_src

The action template requires that I navigate to the outcome under which I want to put the action, so we have a function to set that location.

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-org-mode.el"
  (defun org-capture-next-action-location ()
    "Open the default notes file and move cursor to the desired parent heading for the next action."
    (find-file org-default-notes-file)
    (org-goto))
#+end_src

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-org-mode.el"
  (defun setup-capture-templates ()
    "Configure org capture templates for GTD workflow."
    (setq org-capture-templates
	 `(("l" "Open Loop" entry
	    (file ,org-default-notes-file)
	    ,open-loop-content)
	   ("n" "Next Action" entry
	    (function org-capture-next-action-location)
	    ,next-action-content))))
#+end_src

**** Agenda
I have a few agenda files:

- =journal.org= - this is my daily journal of notes and thoughts.
- =gtd.org= - this is where the list of outcomes and actions belong.
- =habits.org= - [experimental] a place to track habits I wish to develop.
- =1-1s.org= - my schedule of 1:1 meetings and skip level meetings.

These all live in a single, private Git repo, for backup, versioning, and portablity.

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-org-mode.el"
  (defun setup-agenda-files ()
  "Set up Org agenda files."
  (setq org-agenda-files '("~/journal/journal.org"
                           "~/journal/gtd.org"
                           "~/journal/habits.org"
                           "~/journal/1-1s.org")))
#+end_src

I have two main views I use daily:

- Actions - what next physical actions could I do that would move a project forwards
- Outcomes - what projects do I have on my radar

And for weekly review purposes I also have:

- Outcomes without actions - are there any projects for which I have not yet agreed a next action?
- Someday/Maybe - projects I might like to do, but to which I have no current commitment

To facilitate these views, I have a helper function that detects if an outcome has an action

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-org-mode.el"
(defun skip-if-has-action ()
  "Skip subtrees with a TODO keyword of 'ACTION'."
  (org-agenda-skip-subtree-if 'todo '("ACTION")))
#+end_src

And I filter out by default any headlines with the tag =someday=

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-org-mode.el"
  (setq org-agenda-tag-filter-preset '("-someday")) 
#+end_src

The custom commands:

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-org-mode.el"
  (setq org-agenda-custom-commands
        '(("a" "Actions" todo "ACTION")
          ("o" "Outcomes" todo "OUTCOME")
          ("n" "Outcomes without actions"
           todo "OUTCOME"
           ((org-agenda-skip-function #'skip-if-has-action)))
          ("s" "Someday/Maybe"
           tags-todo "+someday"
           ((org-agenda-tag-filter-preset nil)))))
#+end_src
**** Habits

I'm experimenting with using Org Habit to keep on top of things I need to do regularly.

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-org-mode.el"
(defun setup-org-habit ()
  "Setup org-habit module and ensure it's loaded."
  (require 'org-habit)
  (setq org-modules (append org-modules '(org-habit))))
#+end_src

*** Bring it all together 

I use the common community bindings for capture and agenda. Visual line mode ensures that long lines wrap on the screen, at word boundaries. 

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-org-mode.el"
  (use-package org
    :ensure nil
    :bind (("C-c c" . org-capture)
	   ("C-c a" . org-agenda))
    :hook (org-mode . visual-line-mode)
    :config
    (setup-structure-templates)
    (setup-gtd-flow)
    (setup-agenda-files)
    (template-content)
    (setup-capture-templates)
    (setup-org-habit)
    )
#+end_src

*** Arbitrary Queries
=org-ql= is a powerful query language for Org files - I'm experimenting with it - it could end up replacing some of my agenda views.

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-org-mode.el"
  (use-package org-ql
    :ensure t
    :config
    (setq org-ql-search-directories (org-agenda-files)))
#+end_src

*** Make available

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-org-mode.el"
(provide 'sns-org-mode)
#+end_src
** Development Environment

I use Emacs as my primary development environment - this sets up language support and tooling for the languages I use most.

*** Lisp

Naturally as an Emacs user, one of the most common  languages I work in is Emacs Lisp. I also use Clojure extensively.

Both benefit from augmented paren support:

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-development-environment.el" :mkdirp yes
  (show-paren-mode t)

  (use-package paredit
    :ensure t
    :hook ((emacs-lisp-mode
	    clojure-mode
	    lisp-mode) . paredit-mode))

  (use-package rainbow-delimiters
    :ensure t
    :hook ((emacs-lisp-mode
	    clojure-mode
	    lisp-mode) . rainbow-delimiters-mode))
#+end_src

**** Clojure

Clojure is one of my main languages. Emacs has superb support for Clojure, and is one argument for using it as my editor of choice.

We install Clojure mode, and associate it with Clojure, Clojurescript and EDN files.

I like to use Speclj for BDD, so we need to update the mode to understand that the BDD words are actually functions.


#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-development-environment.el" :mkdirp yes
  (use-package clojure-mode
    :ensure t
    :mode (("\\.clj\\'" . clojure-mode)
	   ("\\.cljs\\'" . clojure-mode)
	   ("\\.edn\\'" . clojure-mode))
    :config
  (setq clojure-indent-style 'always-align
        clojure-align-forms-automatically t
        indent-tabs-mode nil)
  (put 'describe 'clojure-indent-function 'defun)
  (put 'context  'clojure-indent-function 'defun)
  (put 'it       'clojure-indent-function 'defun))
#+end_src

Cider is the leading REPL, against which all others are compared:

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-development-environment.el" :mkdirp yes
(use-package cider
  :ensure t
  :hook (clojure-mode . cider-mode))
#+end_src

LSP (Language Server Protocol) gives Emacs modern IDE functionality for refactoring, documentation, and error finding.

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-development-environment.el" :mkdirp yes
  (use-package lsp-mode
    :ensure t
    :hook ((clojure-mode . lsp)
	   (clojurescript-mode . lsp))
    :commands lsp)

  (use-package lsp-ui
  :ensure t)
#+end_src

Treesitter gives fast, accurate syntax parsing, offering flawless syntax highlighting, structural navigation, and context-aware editing features.

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-development-environment.el" :mkdirp yes
(use-package tree-sitter
  :ensure t
  :hook (clojure-mode . tree-sitter-mode))

(use-package tree-sitter-langs
  :ensure t)
#+end_src

*** Magit

Magit is a very powerful and pleasant to use interface for Git.

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-development-environment.el" :mkdirp yes
    (use-package magit
      :ensure t)
#+end_src

*** Nix
#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-development-environment.el" :mkdirp yes
  (use-package nix-mode
    :ensure t
    :mode "\\.nix\\'")

  (use-package ob-nix
    :ensure t)

  (setq org-src-lang-modes
	(append org-src-lang-modes '(("nix" . nix))))
#+end_src

*** HCL
We need to be able to hack on HCL, even though it is nasty.
#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-development-environment.el" :mkdirp yes
      (use-package hcl-mode
	:ensure t
	:mode ("\\.hcl\\'" "\\.tf\\'"))
#+end_src

*** Containers

Docker is a thing.

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-development-environment.el" :mkdirp yes
  (use-package dockerfile-mode
    :ensure t)
#+end_src

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-development-environment.el"
  (use-package yaml-mode
    :ensure t)
#+end_src
#+RESULTS:



*** Rust and Golang

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-development-environment.el" :mkdirp yes
  (use-package go-mode
    :ensure t
    :mode "\\.go\\'")

  (use-package rust-mode
    :ensure t
    :mode "\\.rs\\'")
#+end_src

*** R

ESS (Emacs Speaks Statistics) provides excellent support for R, including an integrated REPL, live code evaluation, and access to R documentation. We configure it to avoid prompting for the working directory on startup and disable some default behaviors that can be intrusive.

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-development-environment.el" :mkdirp yes
  (use-package ess
    :ensure t
    :mode (("\\.R\\'" . R-mode)
           ("\\.r\\'" . R-mode))
    :config
    (require 'ess-site)
    (setq ess-r-flymake-mode nil)
    (setq ess-display-buffer-reuse-frames nil)
    (setq ess-ask-for-ess-directory nil))
#+end_src

*** Make available

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-development-environment.el"
(provide 'sns-development-environment)
#+end_src
** Technical Writing
*** Markdown
#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-technical-writing.el"
  (use-package markdown-mode
    :ensure t
    :hook (markdown-mode . visual-line-mode))
#+end_src

*** Find and show double spaces

I (and some others) am trying to get rid of my habit of inserting double spaces after full stops. Having a minor mode to highlight them is quite a handy way to catch them!

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-technical-writing.el"
(define-minor-mode highlight-double-spaces-mode
  "Minor mode for highlighting double spaces using theme-defined colors."
  :lighter " DSpaces"
  :global nil
  :init-value nil
  (if highlight-double-spaces-mode
      (progn
        (font-lock-add-keywords nil '(("  +" 0 'highlight t)))
        (font-lock-flush)
        (font-lock-ensure))
    (progn
      (font-lock-remove-keywords nil '(("  +" 0 'highlight t)))
      (font-lock-flush)
      (font-lock-ensure))))
#+end_src

#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-technical-writing.el"
  (use-package ox-reveal
    :ensure t)
  (use-package htmlize
    :ensure t)
#+end_src

#+RESULTS:

*** Make available
#+begin_src emacs-lisp :tangle "sns-emacs-modules/sns-technical-writing.el"
(provide 'sns-technical-writing)
#+end_src
** Emacs Lisp Functions
This is where I keep handy functions that I have written or come across.

#+begin_src emacs-lisp :tangle "init.el"
  (require 'sns-functions)
#+end_src

*** Change themes cleanly
#+begin_src emacs-lisp :tangle "sns-lisp/sns-functions.el" :mkdirp yes
  (defun reset-themes-and-load (theme)
    "Disable all themes and load THEME without altering custom faces."
    (interactive
     (list (intern (completing-read "Load theme: " (custom-available-themes)))))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t))
#+end_src
*** Create a checkbox
#+begin_src emacs-lisp :tangle "sns-lisp/sns-functions.el" :mkdirp yes
(defun create-checkbox ()
  "Turn the current line into a checkbox or remove the checkbox."
  (interactive)
  (beginning-of-line)
  (if (looking-at "^- \\[ \\]")
      (replace-match "")
    (insert "- [ ] ")))
#+end_src

*** Inserting the date
#+begin_src emacs-lisp :tangle "sns-lisp/sns-functions.el" :mkdirp yes
(defun sns-insert-journal-heading ()
  "Insert a level 2 Org heading with the current date."
  (interactive)
  (insert (format "** %s\n" (format-time-string "%A %d %B %Y"))))
#+end_src
*** Rename file and buffer
#+begin_src emacs-lisp :tangle "sns-lisp/sns-functions.el" :mkdirp yes
  (defun sns-rename-file-and-buffer ()
    "Rename the file visited by the current buffer and update the buffer to visit the renamed file.
  Prompts for a new name and handles version-controlled files appropriately. If the buffer is not
  visiting a file, signals an error. Ensures the buffer is updated after renaming."
    (interactive)
    (let ((filename (buffer-file-name)))
      (unless (and filename (file-exists-p filename))
	(user-error "Buffer is not visiting a file"))
      (let ((new-name (read-file-name "New name: " filename)))
	(if (vc-backend filename)
	    ;; Use version control rename if the file is under version control.
	    (vc-rename-file filename new-name)
	  ;; Rename file normally and update buffer.
	  (progn
	    (rename-file filename new-name t)
	    (set-visited-file-name new-name t t))))))
#+end_src

*** Reader view for org mode

Quite often for my journal, I want the typing/reading environment to be a bit more attuned to reading/writing, rather than writing software. I find wider margins, a bit more line spacing, and hiding line numbers is very effective for this. This function toggles that view.

#+begin_src emacs-lisp :tangle "sns-lisp/sns-functions.el" :mkdirp yes
(use-package visual-fill-column
  :ensure t
  :config
  (setq-default visual-fill-column-center-text t)

  (defun sns-toggle-readable-view ()
    "Toggle a 'readable' view with centered text, wider margins, and hidden line numbers."
    (interactive)
    (if (bound-and-true-p visual-fill-column-mode)
        (progn
          (visual-fill-column-mode -1)
          (setq line-spacing nil)
          (display-line-numbers-mode 1)
          (message "Readable view disabled"))
      (progn
        (setq visual-fill-column-width 80)
        (setq visual-fill-column-center-text t)
        (setq line-spacing 0.3)
        (display-line-numbers-mode -1)
        (visual-fill-column-mode 1)
        (message "Readable view enabled")))))
#+end_src

*** Make available

#+begin_src emacs-lisp :tangle "sns-lisp/sns-functions.el" :mkdirp yes
(provide 'sns-functions)
#+end_src

#+RESULTS:
: sns-functions
